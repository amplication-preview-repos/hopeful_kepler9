/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Developer as PrismaDeveloper,
  CollaborationInvitation as PrismaCollaborationInvitation,
} from "@prisma/client";

export class DeveloperServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeveloperCountArgs, "select">
  ): Promise<number> {
    return this.prisma.developer.count(args);
  }

  async developers<T extends Prisma.DeveloperFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeveloperFindManyArgs>
  ): Promise<PrismaDeveloper[]> {
    return this.prisma.developer.findMany<Prisma.DeveloperFindManyArgs>(args);
  }
  async developer<T extends Prisma.DeveloperFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeveloperFindUniqueArgs>
  ): Promise<PrismaDeveloper | null> {
    return this.prisma.developer.findUnique(args);
  }
  async createDeveloper<T extends Prisma.DeveloperCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeveloperCreateArgs>
  ): Promise<PrismaDeveloper> {
    return this.prisma.developer.create<T>(args);
  }
  async updateDeveloper<T extends Prisma.DeveloperUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeveloperUpdateArgs>
  ): Promise<PrismaDeveloper> {
    return this.prisma.developer.update<T>(args);
  }
  async deleteDeveloper<T extends Prisma.DeveloperDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeveloperDeleteArgs>
  ): Promise<PrismaDeveloper> {
    return this.prisma.developer.delete(args);
  }

  async findCollaborationInvitations(
    parentId: string,
    args: Prisma.CollaborationInvitationFindManyArgs
  ): Promise<PrismaCollaborationInvitation[]> {
    return this.prisma.developer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .collaborationInvitations(args);
  }
}
