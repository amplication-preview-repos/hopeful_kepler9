/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CollaborationInvitation as PrismaCollaborationInvitation,
  Developer as PrismaDeveloper,
  Project as PrismaProject,
} from "@prisma/client";

export class CollaborationInvitationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CollaborationInvitationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.collaborationInvitation.count(args);
  }

  async collaborationInvitations<
    T extends Prisma.CollaborationInvitationFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CollaborationInvitationFindManyArgs>
  ): Promise<PrismaCollaborationInvitation[]> {
    return this.prisma.collaborationInvitation.findMany<Prisma.CollaborationInvitationFindManyArgs>(
      args
    );
  }
  async collaborationInvitation<
    T extends Prisma.CollaborationInvitationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CollaborationInvitationFindUniqueArgs>
  ): Promise<PrismaCollaborationInvitation | null> {
    return this.prisma.collaborationInvitation.findUnique(args);
  }
  async createCollaborationInvitation<
    T extends Prisma.CollaborationInvitationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CollaborationInvitationCreateArgs>
  ): Promise<PrismaCollaborationInvitation> {
    return this.prisma.collaborationInvitation.create<T>(args);
  }
  async updateCollaborationInvitation<
    T extends Prisma.CollaborationInvitationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CollaborationInvitationUpdateArgs>
  ): Promise<PrismaCollaborationInvitation> {
    return this.prisma.collaborationInvitation.update<T>(args);
  }
  async deleteCollaborationInvitation<
    T extends Prisma.CollaborationInvitationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CollaborationInvitationDeleteArgs>
  ): Promise<PrismaCollaborationInvitation> {
    return this.prisma.collaborationInvitation.delete(args);
  }

  async getDeveloper(parentId: string): Promise<PrismaDeveloper | null> {
    return this.prisma.collaborationInvitation
      .findUnique({
        where: { id: parentId },
      })
      .developer();
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.collaborationInvitation
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
