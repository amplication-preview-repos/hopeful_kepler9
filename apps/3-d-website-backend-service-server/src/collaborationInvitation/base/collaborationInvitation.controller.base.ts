/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollaborationInvitationService } from "../collaborationInvitation.service";
import { CollaborationInvitationCreateInput } from "./CollaborationInvitationCreateInput";
import { CollaborationInvitation } from "./CollaborationInvitation";
import { CollaborationInvitationFindManyArgs } from "./CollaborationInvitationFindManyArgs";
import { CollaborationInvitationWhereUniqueInput } from "./CollaborationInvitationWhereUniqueInput";
import { CollaborationInvitationUpdateInput } from "./CollaborationInvitationUpdateInput";

export class CollaborationInvitationControllerBase {
  constructor(protected readonly service: CollaborationInvitationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CollaborationInvitation })
  async createCollaborationInvitation(
    @common.Body() data: CollaborationInvitationCreateInput
  ): Promise<CollaborationInvitation> {
    return await this.service.createCollaborationInvitation({
      data: {
        ...data,

        developer: data.developer
          ? {
              connect: data.developer,
            }
          : undefined,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        developer: {
          select: {
            id: true,
          },
        },

        id: true,

        project: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CollaborationInvitation] })
  @ApiNestedQuery(CollaborationInvitationFindManyArgs)
  async collaborationInvitations(
    @common.Req() request: Request
  ): Promise<CollaborationInvitation[]> {
    const args = plainToClass(
      CollaborationInvitationFindManyArgs,
      request.query
    );
    return this.service.collaborationInvitations({
      ...args,
      select: {
        createdAt: true,

        developer: {
          select: {
            id: true,
          },
        },

        id: true,

        project: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CollaborationInvitation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async collaborationInvitation(
    @common.Param() params: CollaborationInvitationWhereUniqueInput
  ): Promise<CollaborationInvitation | null> {
    const result = await this.service.collaborationInvitation({
      where: params,
      select: {
        createdAt: true,

        developer: {
          select: {
            id: true,
          },
        },

        id: true,

        project: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CollaborationInvitation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollaborationInvitation(
    @common.Param() params: CollaborationInvitationWhereUniqueInput,
    @common.Body() data: CollaborationInvitationUpdateInput
  ): Promise<CollaborationInvitation | null> {
    try {
      return await this.service.updateCollaborationInvitation({
        where: params,
        data: {
          ...data,

          developer: data.developer
            ? {
                connect: data.developer,
              }
            : undefined,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          developer: {
            select: {
              id: true,
            },
          },

          id: true,

          project: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CollaborationInvitation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollaborationInvitation(
    @common.Param() params: CollaborationInvitationWhereUniqueInput
  ): Promise<CollaborationInvitation | null> {
    try {
      return await this.service.deleteCollaborationInvitation({
        where: params,
        select: {
          createdAt: true,

          developer: {
            select: {
              id: true,
            },
          },

          id: true,

          project: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
